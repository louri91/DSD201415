package cliente;

import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

public class ChatServerImpl extends UnicastRemoteObject implements ChatServer {

	/**
	 * Declaramos las variables necesarias
	 * - connectedClients va a almacenar todos y cada uno de los clientes que se conecten a nuestro servidor.
	 * - conexionClientes va a almacenar todos los clientes como objetos de la clase Conn, que contendrá los parámetros de conexión
	 * 		necesarios para que se haga la conexión entre clientes.
	 * - puerto inicializado a 1100 por defecto, será el puerto que tendrá el primer cliente que se conecte.
	 * - URL variable estática que contiene la referencia a la dirección donde se alojará nuestro RMI de cliente.
	 */
	
	private static final long serialVersionUID = 1L;
	private List<ChatClient> connectedClients;
	private List<Conn> conexionClientes;
	private int puerto = 1100;
	private final static String URL = "//localhost/RmiChatClient";

	/**
	 * Constructor de la clase ChatServerImpl que implementa la interfaz remota de ChatServer
	 * */
	protected ChatServerImpl() throws RemoteException {
		super(0);
		connectedClients = Collections
				.synchronizedList(new ArrayList<ChatClient>());
		conexionClientes = Collections.synchronizedList(new ArrayList<Conn>());
		
	}

	@Override
	public int connect(ChatClient chatClient, String nick) {
		connectedClients.add(chatClient);
		String direccion = URL + puerto;
		System.out.println(direccion);
		Conn conexion = new Conn(nick, direccion, puerto);
		conexionClientes.add(conexion);
		for (ChatClient ch : connectedClients) {
			try {
				ch.callback();
			} catch (RemoteException e) {
				e.printStackTrace();
			}
		}
		puerto++;
		return puerto - 1;
	}
	


	@Override
	public void disconnect(ChatClient chatClient, String nick) {
		if (connectedClients.contains(chatClient)) {
			connectedClients.remove(chatClient);
			for (Conn conexion : conexionClientes) {
				if (conexion.getNick().equals(nick)) {
					conexionClientes.remove(conexion);
				}
			}
		}
	}

	@Override
	public List<ChatClient> getListaConectados() throws RemoteException {
		return connectedClients;
	}

	@Override
	public int getPuerto() {
		return puerto;
	}

	@Override
	public String getUrl() {
		return URL;
	}

	@Override
	public String getUrl(String nick) throws RemoteException {
		for (Conn conexion : conexionClientes) {
			if (conexion.getNick().equals(nick)) {
				return conexion.getConexionURL();
			}
		}
		return null;
	}
	
	@Override
	public ChatClient getStub(String nick) throws RemoteException {
		for(ChatClient client : connectedClients){
			if(client.getNick().equals(nick)){
				return client;
			}
		}
		return null;
	}
	

}
