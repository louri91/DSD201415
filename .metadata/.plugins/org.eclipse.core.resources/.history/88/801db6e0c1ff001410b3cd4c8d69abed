package Chat_v2Privado;

import java.rmi.RemoteException;
import java.rmi.server.UnicastRemoteObject;
import java.util.HashMap;
import java.util.Map;
import java.util.Map.Entry;

public class ChatClientImpl extends UnicastRemoteObject implements ChatClient {
	private Map<ChatClient,ChatClient> privado = new HashMap<ChatClient, ChatClient>();
	private String nombreCliente;
	private ClientGUI interfaz;
	private Client cliente;
	private PrivateGUI interfazPrivate;
	protected ChatClientImpl(ClientGUI interfaz,Client cliente) throws RemoteException {
		super(0);
		this.interfaz = interfaz;
		this.cliente = cliente;
	}
	@Override
	public void callback(String nick, String content, String nombreUsuario) {
		for(Entry<ChatClient, ChatClient> entry : privado.entrySet()) {
		    ChatClient key = entry.getKey();
		    if(key.getNick().equals(nick)){
		    	
		    }
		}
		interfazPrivate.getMensajes().append(nombreUsuario+": " + content);
		System.out.println(nombreUsuario+": " + content);
		cliente.actualizarListaUsuarios();
	}

	@Override
	public void setNick(String nombreUsuario) throws RemoteException {
		this.nombreCliente = nombreUsuario;
	}
	public String getNick(){
		return nombreCliente;
	}
	
	public void conectarClientes(ChatClient cliente, ChatClient cliente2) throws RemoteException {
		
		for(Entry<ChatClient, ChatClient> entry : privado.entrySet()) {
		    ChatClient key = entry.getKey();
		    if(!key.equals(cliente)){
				privado.put(cliente2, cliente);
		    }
		}
	
	}
	@Override
	public void callback(String content, String nombreUsuario)
			throws RemoteException {
		System.out.println(nombreUsuario+": " + content);
		cliente.actualizarListaUsuarios();		
	}
}
